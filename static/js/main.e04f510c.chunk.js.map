{"version":3,"sources":["address.js","App.js","index.js"],"names":["list","require","App","useState","input","setInput","utf8Bytes","utf8","encode","ipList","length","match","map","s","padEnd","c","charCodeAt","className","value","onChange","e","target","placeholder","toString","padStart","join","ip","i","ipv4","assignment","byte","prefix","find","item","Prefix","findAssignment","Status","Designation","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"07zCAAMA,G,MAAOC,EAAQ,K,WCkCNC,MA7Bf,WACE,MAA4BC,mBAAS,IAArC,mBAAQC,EAAR,KAAeC,EAAf,KAEMC,EAAYC,IAAKC,OAAOJ,GAE1BK,EAASL,EAAMM,OAAS,EAAIJ,EAAUK,MAAM,WAAWC,KAAI,SAAAC,GAAC,OAAI,YAAIA,EAAEC,OAAO,EAAE,OAAOF,KAAI,SAAAG,GAAC,OAAIA,EAAEC,WAAW,SAAO,GAEvH,OACE,sBAAKC,UAAU,MAAf,UACE,uBAAOA,UAAU,aAAaC,MAAOd,EAAOe,SAAU,SAAAC,GAAC,OAAIf,EAASe,EAAEC,OAAOH,QAAQI,YAAY,0BACjG,mBAAGL,UAAU,WAAb,SAAyB,YAAIX,GAAWM,KAAI,SAAAG,GAAC,OAAIA,EAAEC,WAAW,GAAGO,SAAS,IAAIC,SAAS,EAAG,QAAMC,KAAK,OAEnGhB,EAAOG,KAAI,SAACc,EAAIC,GACd,IAAMC,EAAI,UAAMF,EAAG,GAAT,YAAeA,EAAG,GAAlB,YAAwBA,EAAG,GAA3B,YAAiCA,EAAG,IACxCG,EDbT,SAAyBC,GAC5B,IAAMC,EAAM,UAAMD,EAAKP,WAAWC,SAAS,EAAE,KAAjC,MAEZ,OAAOxB,EAAKgC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,SAAWH,KCUhBI,CAAeT,EAAG,IAErC,OACE,sBAAaT,UAAU,UAAvB,UACE,mBAAGA,UAAU,YAAb,SAA0BW,IAC1B,oBAAGX,UAAU,SAAb,UAAuBY,EAAWO,OAAlC,MAA6CP,EAAWQ,eACxD,mBAAGpB,UAAU,SAAb,SAAsB,mBAAGqB,KAAI,4BAAuBV,GAAQP,OAAO,SAA7C,wBAHdM,UCjBtBY,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e04f510c.chunk.js","sourcesContent":["const list = require('./ipv4-address-space.json');\r\n\r\n/**\r\n *\r\n * @param {number} byte\r\n */\r\nexport function findAssignment (byte) {\r\n    const prefix = `${byte.toString().padStart(3,\"0\")}/8`;\r\n\r\n    return list.find(item => item.Prefix === prefix);\r\n}","import { useState } from 'react';\nimport utf8 from 'utf8';\nimport './App.css';\nimport { findAssignment } from './address';\n\nfunction App() {\n  const [ input, setInput ] = useState(\"\");\n\n  const utf8Bytes = utf8.encode(input);\n\n  let ipList = input.length > 0 ? utf8Bytes.match(/.{1,4}/g).map(s => [...s.padEnd(4,\"\\0\")].map(c => c.charCodeAt(0))) : [];\n\n  return (\n    <div className=\"App\">\n      <input className=\"EmojiInput\" value={input} onChange={e => setInput(e.target.value)} placeholder=\"Enter some characters\" />\n      <p className=\"ByteList\">{[...utf8Bytes].map(c => c.charCodeAt(0).toString(16).padStart(2, \"0\")).join(\" \")}</p>\n      {\n        ipList.map((ip, i) => {\n          const ipv4 = `${ip[0]}.${ip[1]}.${ip[2]}.${ip[3]}`;\n          const assignment = findAssignment(ip[0]);\n\n          return (\n            <div key={i} className=\"IPEntry\">\n              <p className=\"IPAddress\">{ipv4}</p>\n              <p className=\"Status\">{assignment.Status} - {assignment.Designation}</p>\n              <p className=\"Lookup\"><a href={`https://db-ip.com/${ipv4}`} target=\"_blank\">Lookup</a></p>\n            </div>\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}